AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Provide exactly THREE (3) subnets in your selected VPC
  DesiredCapacity:
    Type: Number
    Default: 2
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: 3
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m4.xlarge
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.
  ElasticSearchInstanceType:
    Description: The Instance type to use for ElasticSearch instances (Note, must have ephemeral storage, the instance type affects the total amount of elasticsearch storage. i2 strongly recommended)
    Type: String
    Default: 'i2.xlarge.elasticsearch'
    AllowedValues: ['i2.xlarge.elasticsearch', 'i2.2xlarge.elasticsearch', 'm3.medium.elasticsearch',
      'm3.large.elasticsearch', 'm3.xlarge.elasticsearch', 'm3.medium.elasticsearch', 'r3.large.elasticsearch',
      'r3.xlarge.elasticsearch', 'r3.2xlarge.elasticsearch', 'r3.4xlarge.elasticsearch', 'r3.8xlarge.elasticsearch' ]
  ElasticSearchShardCount:
    Description: Number of ElasticSearch hosts to provision at launch (3 recommended)
    Default: 3
    Type: Number
  ElasticSearchReplicaCount:
    Description: Replication factor for ElasticSearch shards (how many extra copies to keep)
    Default: 1
    Type: Number
  ContactDept:
    Description: Contact department for billing purposes
    Type: String
  ContactEmail:
    Description: Contact email for Cloudwatch notifications and instance tagging
    Type: String
  DBPassword:
    Description: Enter DB Password
    NoEcho: true
    Type: String
  DBUser:
    Description: Enter DB User Name
    Default: delivery
    Type: String
  SSLCertificateARN:
    Default: 'arn:aws:iam::'
    Description: SSL Certficate ARN for SSL Certficate
    Type: String

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-d61027ad
    us-east-2:
      AMIID: ami-bb8eaede
    us-west-1:
      AMIID: ami-514e6431
    us-west-2:
      AMIID: ami-c6f81abe

Resources:
# First, define the ECS cluster: an autoscaling group of EC2 instances running the special ECS AMI
  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: 1
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-dockerhost
        PropagateAtLaunch: true
      - Key: X-Dept
        Value: !Ref ContactDept
        PropagateAtLaunch: true
      - Key: X-Contact
        Value: !Ref ContactEmail
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  # Launch configuration to start ECS container instances running habitat
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref EcsSecurityGroup]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref 'KeyName'
      EbsOptimized: true
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 200
          VolumeType: gp2
          DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          function error_exit {
            aws autoscaling set-instance-health --health-status Unhealthy --region ${AWS::Region} --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
            exit 1
          }

          yum install -y aws-cli aws-cfn-bootstrap || error_exit
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region} || error_exit
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              nfs-utils: []
          files:
            /etc/security/limits.d/ecs.conf:
              content: |
                #<domain>      <type>  <item>         <value>
                *               soft    nproc         1000000
                *               hard    nproc         1000000
                *               soft    nofile        1000000
                *               hard    nofile        1000000
            /usr/local/bin/start-hab-peering.sh:
              mode: '000755'
              content: !Sub |
                export AWS_DEFAULT_REGION=${AWS::Region}
                current_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                current_autoscaling_group=$(aws autoscaling describe-auto-scaling-instances --query "AutoScalingInstances[?InstanceId==\`$current_instance_id\`].AutoScalingGroupName"  --output text)
                peer_instances=$(aws autoscaling describe-auto-scaling-instances --query "AutoScalingInstances[? AutoScalingGroupName==\`$current_autoscaling_group\` && InstanceId!=\`$current_instance_id\`].InstanceId" --output text | awk '{print $1}')

                if [ -z "$peer_instances" ]; then
                # no peers found
                  /bin/hab sup run
                else
                  peer_ip=$(aws ec2 describe-instances --instance-ids $peer_instances --query 'Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddress' --output text)
                  /bin/hab sup run --peer $peer_ip
                fi
            /etc/init/habitat.conf:
              content: !Sub |
                start on runlevel [2345]
                stop on shutdown
                respawn
                exec /usr/local/bin/start-hab-peering.sh >> /var/log/habitat.log 2>&1
          commands:
            01_install_and_start_habitat:
              command: |
                curl https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash
                sleep 30
                initctl start habitat
            02_configure_nfs:
              command: !Sub |
                EC2_AVAIL_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                EC2_REGION=${AWS::Region}
                EFS_FILE_SYSTEM_ID=${ECSFileSystem}
                NFS_SRC=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com

                echo "$NFS_SRC:/ /mnt/efs nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
                mkdir -p /mnt/efs
                mount -a
                mkdir -p /mnt/efs/${AWS::StackName}
            03_configure_ecs:
              command: !Sub |
                echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-ecs-service
        PolicyDocument:
          Statement:
          # default actions as needed for ECS cluster operations
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
          # Weave Net permissions
          - Effect: Allow
            Action: ['ec2:DescribeInstances', 'ec2:DescribeTags', 'autoscaling:*',
              'ecs:ListServices', 'ecs:DescribeTasks', 'ecs:DescribeServices']
            Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VPC

  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupHTTPSinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupALLports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'EcsSecurityGroup'

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

################################################################################
#  Combo Service - runs all of the containers in a single task definition (1 host), so linking can work
################################################################################
  NginxService:
    Type: AWS::ECS::Service
    DependsOn: ECShttpslistener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCapacity
      LoadBalancers:
      - ContainerName: automate-nginx
        ContainerPort: 80
        TargetGroupArn: !Ref ECSTG
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref NginxTask

  NginxTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - WorkflowService
    - ComplianceService
    - NotificationsService
    - ElasticsearchService
    Properties:
      Family: !Sub ${AWS::StackName}-nginx
      NetworkMode: host
      ContainerDefinitions:
      - Name: automate-nginx
        Hostname: automate-nginx
        Cpu: 100
        Essential: 'true'
        Image: irvingpop/automate-nginx:latest
        Memory: 512
        PortMappings:
        - ContainerPort: 80
        - ContainerPort: 443
        Command:
        - --peer
        - 172.17.0.1
        - --listen-gossip
        - 0.0.0.0:9656
        - --listen-http
        - 0.0.0.0:9666
        - --bind
        - workflow:workflow-server.default
        - --bind
        - compliance:compliance.default
        - --bind
        - notifications:notifications.default
        - --bind
        - elasticsearch:aws-signing-proxy.default
        MountPoints:
        - ContainerPath: /var/opt/delivery/delivery/etc
          SourceVolume: maintenance
        - ContainerPath: /hab/svc/automate-nginx/data
          SourceVolume: nginx-data
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub ${AWS::StackName}
      Volumes:
      - Name: nginx-data
        Host:
          SourcePath: !Sub /mnt/efs/${AWS::StackName}/nginx-data
      - Name: maintenance
        Host:
          SourcePath: !Sub /mnt/efs/${AWS::StackName}/maintenance

  WorkflowService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCapacity
      TaskDefinition: !Ref WorkflowTask

  WorkflowTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - DBPostgres
    - ElasticsearchService
    - RabbitMQService
    Properties:
      Family: !Sub ${AWS::StackName}-workflow
      NetworkMode: host
      ContainerDefinitions:
      - Name: workflow
        Hostname: workflow
        Cpu: 100
        Essential: 'true'
        Image: irvingpop/workflow-server:latest
        Memory: 1024
        Environment:
        - Name: HAB_WORKFLOW_SERVER
          Value: !Sub |
            sql_user = "${DBUser}"
            sql_password = "${DBPassword}"

            [postgresql]
            vip = "${DBPostgres.Endpoint.Address}"
            port = 5432
        Command:
        - --peer
        - 172.17.0.1
        - --listen-gossip
        - 0.0.0.0:9653
        - --listen-http
        - 0.0.0.0:9663
        - --bind
        - rabbitmq:rabbitmq.default
        - --bind
        - elasticsearch:aws-signing-proxy.default
        MountPoints:
        - ContainerPath: /var/opt/delivery/delivery/etc
          SourceVolume: maintenance
        - ContainerPath: /hab/svc/workflow-server/data
          SourceVolume: workflow-data
        Ulimits:
        - Name: nofile
          HardLimit: 262144
          SoftLimit: 262144
        - Name: nproc
          HardLimit: 131072
          SoftLimit: 131072
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub ${AWS::StackName}
      Volumes:
      - Name: workflow-data
        Host:
          SourcePath: !Sub /mnt/efs/${AWS::StackName}/workflow-data
      - Name: maintenance
        Host:
          SourcePath: !Sub /mnt/efs/${AWS::StackName}/maintenance

  ComplianceService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref ComplianceTask

  ComplianceTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - ElasticsearchService
    Properties:
      Family: !Sub ${AWS::StackName}-compliance
      NetworkMode: host
      ContainerDefinitions:
      - Name: compliance
        Hostname: compliance
        Cpu: 100
        Essential: 'true'
        Image: irvingpop/compliance:latest
        Memory: 768
        Command:
        - --peer
        - 172.17.0.1
        - --listen-gossip
        - 0.0.0.0:9655
        - --listen-http
        - 0.0.0.0:9665
        - --bind
        - elasticsearch:aws-signing-proxy.default
        MountPoints:
        - ContainerPath: /hab/svc/compliance/data
          SourceVolume: compliance-data
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub ${AWS::StackName}
      Volumes:
      - Name: compliance-data
        Host:
          SourcePath: !Sub /mnt/efs/${AWS::StackName}/compliance-data

  NotificationsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref NotificationsTask

  NotificationsTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - ElasticsearchService
    Properties:
      Family: !Sub ${AWS::StackName}-notifications
      NetworkMode: host
      ContainerDefinitions:
      - Name: notifications
        Hostname: notifications
        Cpu: 100
        Essential: 'true'
        Image: irvingpop/notifications:latest
        Memory: 768
        Command:
        - --peer
        - 172.17.0.1
        - --listen-gossip
        - 0.0.0.0:9654
        - --listen-http
        - 0.0.0.0:9664
        - --bind
        - rabbitmq:rabbitmq.default
        - --bind
        - elasticsearch:aws-signing-proxy.default
        MountPoints:
        - ContainerPath: /hab/svc/notifications/data
          SourceVolume: notifications-data
        Ulimits:
        - Name: nofile
          HardLimit: 262144
          SoftLimit: 262144
        - Name: nproc
          HardLimit: 131072
          SoftLimit: 131072
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub ${AWS::StackName}
      Volumes:
      - Name: notifications-data
        Host:
          SourcePath: !Sub /mnt/efs/${AWS::StackName}/notifications-data

  LogstashService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCapacity
      TaskDefinition: !Ref LogstashTask

  LogstashTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - ElasticsearchService
    - RabbitMQService
    Properties:
      Family: !Sub ${AWS::StackName}-logstash
      NetworkMode: host
      ContainerDefinitions:
      - Name: logstash
        Cpu: 1000
        Essential: 'true'
        Image: irvingpop/logstash:latest
        Memory: 2048
        Command:
        - --peer
        - 172.17.0.1
        - --listen-gossip
        - 0.0.0.0:9652
        - --listen-http
        - 0.0.0.0:9662
        - --bind
        - rabbitmq:rabbitmq.default
        - --bind
        - elasticsearch:aws-signing-proxy.default
        Ulimits:
        - Name: nofile
          HardLimit: 262144
          SoftLimit: 262144
        - Name: nproc
          HardLimit: 131072
          SoftLimit: 131072
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub ${AWS::StackName}

  ElasticsearchService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCapacity
      TaskDefinition: !Ref ElasticsearchTask

  ElasticsearchTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - ElasticsearchDomain
    Properties:
      Family: !Sub ${AWS::StackName}-elasticsearch
      NetworkMode: host
      ContainerDefinitions:
      - Name: aws-signing-proxy
        Hostname: aws-signing-proxy
        Cpu: 100
        Essential: 'true'
        Image: irvingpop/aws-signing-proxy:latest
        Memory: 256
        Command:
        - --peer
        - 172.17.0.1
        - --listen-gossip
        - 0.0.0.0:9651
        - --listen-http
        - 0.0.0.0:9661
        Environment:
        - Name: HAB_AWS_SIGNING_PROXY
          Value: !Sub |
            listen_address = "0.0.0.0"
            port = 9200
            target = "https://${ElasticsearchDomain.DomainEndpoint}"
            region = "${AWS::Region}"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub ${AWS::StackName}

  RabbitMQService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref RabbitMQTask

  RabbitMQTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-rabbitmq
      NetworkMode: host
      ContainerDefinitions:
      - Name: rabbitmq
        Hostname: rabbitmq
        Cpu: 100
        Essential: 'true'
        Image: chefdemo/rabbitmq:current
        Memory: 768
        Command:
        - --peer
        - 172.17.0.1
        - --listen-gossip
        - 0.0.0.0:9650
        - --listen-http
        - 0.0.0.0:9660
        Environment:
        - Name: HAB_RABBITMQ
          Value: |
            [rabbitmq]
            default_vhost = '/insights'
            default_user = 'insights'
            default_pass = 'chefrocks'
            [rabbitmq.management]
            enabled = true
        Ulimits:
        - Name: nofile
          HardLimit: 262144
          SoftLimit: 262144
        - Name: nproc
          HardLimit: 131072
          SoftLimit: 131072
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Sub ${AWS::StackName}

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-lb
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref SubnetIds
      SecurityGroups: [!Ref EcsSecurityGroup]

  ECShttplistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSALB
      Port: 80
      Protocol: HTTP

  ECShttpslistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
        Certificates:
          - CertificateArn: !Ref SSLCertificateARN
        LoadBalancerArn: !Ref ECSALB
        Port: 443
        Protocol: HTTPS
        DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG

  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /viz/
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${AWS::StackName}-ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
            Resource: '*'

################################################################################
#  PostgreSQL service
################################################################################
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Automate Access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EcsSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS DB subnet group
      SubnetIds: !Ref SubnetIds

  DBPostgres:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: "Snapshot"
    Properties:
      DBName: automate
      AllocatedStorage: 50
      # Iops: !Ref DBIops
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.m4.large
      StorageType: gp2
      MultiAZ: true
      Engine: postgres
      EngineVersion: 9.6.3
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 35
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-pgdb
        - Key: X-Dept
          Value: !Ref ContactDept
        - Key: X-Contact
          Value: !Ref ContactEmail

################################################################################
#  Elasticsearch service
################################################################################
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: 5.3
      ElasticsearchClusterConfig:
        InstanceCount: !Ref ElasticSearchShardCount
        ZoneAwarenessEnabled: false
        InstanceType: !Ref ElasticSearchInstanceType
        DedicatedMasterEnabled: false
        # DedicatedMasterType: t2.medium.elasticsearch
        # DedicatedMasterCount: "3"
      # EBSOptions:
      #   EBSEnabled: true
      #   Iops: !Ref DBIops
      #   VolumeSize: !Ref DBAllocatedStorage
      #   VolumeType: io1
      SnapshotOptions:
        AutomatedSnapshotStartHour: "0"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !GetAtt EC2Role.Arn
            Action: "es:*"
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: "true"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ES
      - Key: X-Dept
        Value: !Ref ContactDept
      - Key: X-Contact
        Value: !Ref ContactEmail

################################################################################
#  EFS (NFS) for mountpoint persistence
################################################################################
  ECSFileSystem:
    Type: 'AWS::EFS::FileSystem'

  # TODO: Revisit this in the future as it expects 3 subnets to be provided
  ECSFileSystemMountA:
    Type: "AWS::EFS::MountTarget"
    Properties:
      FileSystemId: !Ref ECSFileSystem
      SubnetId: !Select [ 0, !Ref SubnetIds ]
      SecurityGroups:
        - Ref: ECSFileSystemSecurityGroup

  ECSFileSystemMountB:
    Type: "AWS::EFS::MountTarget"
    Properties:
      FileSystemId: !Ref ECSFileSystem
      SubnetId: !Select [ 1, !Ref SubnetIds ]
      SecurityGroups:
        - Ref: ECSFileSystemSecurityGroup

  ECSFileSystemMountC:
    Type: "AWS::EFS::MountTarget"
    Properties:
      FileSystemId: !Ref ECSFileSystem
      SubnetId: !Select [ 2, !Ref SubnetIds ]
      SecurityGroups:
        - Ref: ECSFileSystemSecurityGroup

  ECSFileSystemSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound NFS to the EFS mount targets
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref EcsSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ECS-SG
      VpcId: !Ref VPC


  # ServiceScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   DependsOn: service
  #   Properties:
  #     MaxCapacity: 2
  #     MinCapacity: 1
  #     ResourceId: !Join ['', [service/, !Ref 'ECSCluster', /, !GetAtt [service, Name]]]
  #     RoleARN: !GetAtt [AutoscalingRole, Arn]
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs

  # ServiceScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: AStepPolicy
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref 'ServiceScalingTarget'
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: PercentChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalLowerBound: 0
  #         ScalingAdjustment: 200

  # ALB500sAlarmScaleUp:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     EvaluationPeriods: '1'
  #     Statistic: Average
  #     Threshold: '10'
  #     AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
  #     Period: '60'
  #     AlarmActions: [!Ref 'ServiceScalingPolicy']
  #     Namespace: AWS/ApplicationELB
  #     Dimensions:
  #     - Name: ECSService
  #       Value: !Ref 'service'
  #     ComparisonOperator: GreaterThanThreshold
  #     MetricName: HTTPCode_ELB_5XX_Count

Outputs:
  ECSALB:
    Description: Your ALB DNS URL
    Value: !Sub https://${ECSALB.DNSName}
